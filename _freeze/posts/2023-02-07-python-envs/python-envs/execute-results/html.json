{
  "hash": "7bba7808789fb09410c83a857aaf372c",
  "result": {
    "markdown": "---\ntitle: A note on Python environments\nauthor: Filip Wästberg\ndate: '2023-02-07'\ncategories:\n  - python\nimage: pyenv.png\n---\n\nAt least once a year I get a chance to dable with Python. This time I'm involved in a project where we develop outlier detection algorithms for district heating networks.\n\nThe code base relies on some old versions of packages and a stable version of Python itself.\n\n## Why do this\n\nI'm a Data Scientist, I get paid to analyze data to solve problems. Most of the time I use R to do this.\n\nAs R users we are very spoiled by the package management system that is built into R. I install a package via `install.packages(\"dplyr\")` and it *just works*. This is very nice feature since most of my work is not done with the intention of writing software. I mainly use it to investigate something: manipulate, visualize and model data. This means that the less time I need to spend on setup, the more productive I can be. \n\n## Virtual environments are not new to me\n\nOf course, if I want my code to be used for production, for example scheduling a script, I want to make sure that the script doesn't fail if I change my setup, like updating a package. So I know the concept of virtual environments. I have used R packages for this, like `renv` and `packrat`, and also Docker. But I use these when I need them.\n\n## Python feels like a lottery\n\nMy experience with Python has not been as frictionless (to be fair I have had my experience of setup trouble in R as well, yes I'm looking at you RJava). Using Python is like a lottery to me. Most of the times it works, but as soon as I have to do something out of the ordinary I run into to trouble. And my feeling is that in most cases this is because of virtual environments. Again, these troubles probably arise because I'm not a software developer, I'm a data analyst. So I'm not *really* interested in these things, I just want it to work.\n\nSo every time I have run into trouble when using Python I have usually spent a day googling and following different tutorials, then, for some reason, it works.\n\nNow it has happened again. But I thought I'd write everything down this time.\n\n## The concept of virtual environments\n\nIn order to use Python productivly most developers will encourage you to use Virtual Environments. \n\nI think of virtual environments as folders where you save all the packages that you use in Python. Ideally, you should be able to have different environments that can use different packages and different versions of Python. However, virtual environments mainly focus on the package side.\n\n### What version?\n\nWhen you open the terminal and type `python --version` you can get different answers. I found [this article](https://towardsdatascience.com/python-the-system-path-and-how-conda-and-pyenv-manipulate-it-234f8e8bbc3e) really helpful in understanding why this happens.\n\n## venv\n\nAs far as I've understood the built-in environment system for Python is `venv`.\n\nTo use it we can simply type in the terminal:\n\n\n```{bash eval=FALSE}\npython3 -m venv path-to-mynewenv\n```\n\n\nOkay. We don't get anything back. But what happens is that `venv` creates a folder where you are in the terminal with packages etc.\n\nAlso, we don't know the version of Python in this environemnt. But in the [Python documentation](https://docs.python.org/3/library/venv.html) it says\n\n>> A virtual environment is created on top of an existing Python installation, known as the virtual environment’s “base”\n\nIn other words: we cannot specify Python version for virtual environments with `venv`. However, since you can have multiple versions of Python on your computer you can get different answers to these questions depending on where you open a terminal.ß\n\nFor example, when I open the temrinal on my Mac I get version Python3 version `3.8.13`, in the `VSCode` terminal I get `3.7.9` and in the RStudio terminal I get `3.6.11`. Depending on this, I will get different Python versions in the environments that I create with `venv`. This is not necessarily a bad thing, but it may be confusing for someone who don't know that much about it.\n\nAnyways, to use the environment we created we need to activate it:\n\n\n```{bash eval=FALSE}\nsource mynewenv/bin/activate\n```\n\n\nand then we can then install packages into it:\n\n\n```{bash eval=FALSE}\npip install pandas numpy\n```\n\n\nAnd now we can use it:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ns = pd.Series([1, 3, 5, np.nan, 6, 8])\n\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n```\n:::\n:::\n\n\nThis works well for interactive usage. But I struggle to get this to work if I want to use the same environment for other projects without having to create a new environment for each project. This is where conda comes in.\n\n## Anaconda and conda\n\nIn the project a colleague of mine had a Jupyter Notebook with some analysis that I wanted to run. Most people I know that uses Jupyter uses it with [Anaconda.](https://www.anaconda.com/products/distribution). You install Anaconda from their [website](https://www.anaconda.com/products/distribution).  \n`Anaconda` is not only for Python. On its website it [says](https://docs.conda.io/projects/conda/en/stable/):\n\n>> Package, dependency and environment management for any language---Python, R, Ruby, Lua, Scala, Java, JavaScript, C/ C++, FORTRAN\n\nIn other words, when you install Anaconda, you install a lot. \n\n### conda\n\nTo use virtual environments in Anaconda you use `conda` instead of `venv`. `conda` also creates the environments in one place so you can use them in multiple projects. You can do this in Anaconda or in the terminal.\n\nThe terminal was my approach, since I wanted to use my VSCode instead of Anaconda. \n\nIt should be noted that I installed Anaconda and `conda` a long time ago so I had to update it before getting it to work properly. First run: `conda update conda`, then `conda install anaconda`, not sure why and lastly I had to run `conda update --all` to get it to work the way I wanted. This took a while.\n\nBut as soon as it worked I was able to create an environment:\n\n\n```{bash eval=FALSE}\nconda create -n pythonds python=3.8\n```\n\n\nTo install packages into the conda environment I ran: `conda install -n condaenv numpy=1.19.2 pandas=1.2.3`\n\nI wanted to use the environment in a Quarto document. To do this I had to register it to `ipykernel`.\n\n\n```{bash eval=FALSE}\npython -m ipykernel install --user --name=pythonds\n```\n\n\n## The setup that now works for me\n\nAt some point we just want things to work. And right now this is what works for me when working with Python.\n\n1. I create virtual environments with conda and actiavte it\n2. When I want to save virtual environments I create a conda.yml file to specify dependencies\n3. Register the environment to the jupyter kernel so I can use them in Quarto and in Jupyter notebooks\n\nThis setup works for me right now... Crossing my fingers that it will work tomorrow.\n\n## Bonus tricks\n\n### miniconda \n\nAs I mentioned `conda` is not restricted to Python. A smaller version of conda, primarily made for Python is `miniconda`:\n\n>> Miniconda is a free minimal installer for conda. It is a small, bootstrap version of Anaconda that includes only conda, Python, the packages they depend on, and a small number of other useful packages, including pip, zlib and a few others. Use the conda install command to install 720+ additional conda packages from the Anaconda repository.\"\n\nThe good thing about Miniconda is that you can use `conda` in the same way. So to create a virtual environment you do exactly the same: `conda create -n minienv python=3.8` \n\n### pyenv\n\nWith conda you can specify Python version, but not with `venv`. If you want to switch Python versions most people will suggest `pyenv`. You can use `pyenv` in a similar fashion.\n\n",
    "supporting": [
      "python-envs_files"
    ],
    "filters": [],
    "includes": {}
  }
}